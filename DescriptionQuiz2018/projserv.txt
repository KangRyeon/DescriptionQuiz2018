// projserv.c
// ./projserv 3017

#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/file.h>
#include <netinet/in.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <time.h>

#define MAXLINE  511
#define MAX_SOCK 1024

char *EXIT_STRING = "exit";
char *READY_STRING = "준비가 되셨으면 Ready를 보내주세요\n";
int maxfdp1;                // 최대 소켓번호 +1
int num_chat = 0;           // 채팅 참가자 수
int clisock_list[ MAX_SOCK ]; // 채팅에 참가자 소켓번호 목록
int listen_sock;
int ready_list[ MAX_SOCK ];   // 준비요청한 리스트
int start_flag = 0;                   // start_flag == 1 -> 게임시작한것
int speaker = -1;                             // 문제 제출자
int quiz_num = 0;				// 랜덤으로 받은 퀴즈의 번호
int quiz_done = 0;				// 맞춘 퀴즈 개수
char *quiz[15] = {"사자", "거북이", "토끼", "고슴도치", "비둘기"
                , "연필", "지우개", "선풍기", "책", "마우스"
                , "은행나무", "장미", "민들레", "벚꽃", "해바라기"};
int quiz_do[15];				// 어떤 퀴즈를 했는지
int score[ MAX_SOCK ];                          // 스코어 모음
char name[ MAX_SOCK ][20] = {""};				// 참가자 이름

// 새로운 채팅 참가자 처리
void addClient(int s, struct sockaddr_in *newcliaddr);
void removeClient(int);                         // 채팅 탈퇴 처리 함수
int set_nonblock(int sockfd);                   // 소켓을 넌블록으로 설정
int is_nonblock(int sockfd);                    // 소켓이 넌블록 모드인지 확인
int tcp_listen(int host, int port, int backlog); // 소켓 생성 및 listen
int get_ready();                                 // 현재 참가자들한테 ready 받음.(참가자 3이상)
int get_speaker_and_quiz();                   // 참가자중에 speaker 선택 -> 0번부터 할 것, 제출문제 정함(문제번호 리턴)
void game_set();                                // 게임 셋(제출자 선택, 클라이언트에게 게임시작 문구 출력, 제출자한테 문제제출
void set_score(int num);                        // 참가자 번호 넘겨주면 점수 올림
void get_winner();				// 마지막에 점수출력 + 이긴사람 선택
void errquit(char *mesg) { perror(mesg); exit(1); }

int main(int argc, char *argv[]) {
    char buf[MAXLINE+1];
    int i, j, nbyte, count;
    int accp_sock, clilen;
    struct sockaddr_in  cliaddr;

    if(argc != 2) {
        printf("사용법 :%s port\n", argv[0]);
       exit(0);
    }

    listen_sock = tcp_listen(INADDR_ANY,atoi(argv[1]),5);
    if(listen_sock==-1)
        errquit("tcp_listen fail");
    if(set_nonblock(listen_sock) == -1)
        errquit("set_nonblock fail");

    for(count=0; ;count++) {
        if(count==100000) {
           //putchar('.');
           fflush(stdout);
           count=0;
           if(num_chat >= 3 && start_flag == 0) // 참가자가 3명 이상, 시작 안했으면
                if(get_ready() == 1){           // get_ready() == 1 -> 모두가 ready를 누르면 1
                    game_set();
                }
	    	
	   // 맞춘 개수가 10개가 된다면 아예 종료
	   if(quiz_done >= 10){
    		// 전체 스코어 알려주고, 승리자 선택함.
    		get_winner();
		exit(0);
	   }	
        }
        clilen = sizeof(cliaddr);
        accp_sock= accept(listen_sock, (struct sockaddr *) &cliaddr, &clilen);

        if(accp_sock == -1 && errno!=EWOULDBLOCK) {
            errquit("accept fail");
        }
        else if(accp_sock > 0) {
            // 채팅 클라이언트 목록에 추가
            clisock_list[num_chat] = accp_sock;
            // 통신용 소켓은 넌블록 모드가 아님
            if(is_nonblock(accp_sock)!=0 && set_nonblock(accp_sock) < 0)
                errquit("set_nonblock fail");
            addClient(accp_sock,&cliaddr);
            send(accp_sock, READY_STRING, strlen(READY_STRING), 0);
            printf("%d번째 사용자 추가.\n", num_chat);
        }

        // 클라이언트가 보낸 메시지를 모든 클라이언트에게 방송
        for(i = 0; i < num_chat; i++) {
            errno = 0;
            nbyte = recv(clisock_list[i], buf, MAXLINE, 0);
            if(nbyte==0) {
                removeClient(i);    // abrupt exit
                continue;
            }
            else if( nbyte==-1 && errno == EWOULDBLOCK)
                continue;

            // 종료문자 처리
            if(strstr(buf, EXIT_STRING) != NULL) {
                removeClient(i);    // abrupt exit
                continue;
            }

            // 레디문자 처리
            if(strstr(buf, "Ready") != NULL) {
		char tmp3[200];
		char tmp2[200];
		char *tmp;

 		strcpy(tmp2, buf);
		tmp = strtok(tmp2, ":");

		strcpy(tmp3, tmp);
		strcpy(name[i],tmp3);

                ready_list[i] = 1;
                printf("<클라이언트 %d-%s가 레디했습니다.>\n", i, name[i]);

            	// 모든 채팅 참가자에게 메시지 방송
            	buf[nbyte] = 0;
            	for (j = 0; j < num_chat; j++)
                    send(clisock_list[j], buf, nbyte, 0);		    

		break;
	 	
            }

            // 정답이 들어가있는지 확인, 제출자가 보낸거면 제출자한테 경고 보냄
            // 다른사람이 보낸거면 그사람 정답처리
            if(strstr(buf, quiz[quiz_num]) != NULL) {
                if(i == speaker) {
		    char *do_not_again = "<정답이 들어간 문장을 사용하면 안돼요>\n";
                    printf("%s",do_not_again);
                    // 제출자한테 메시지 보냄
                    send(clisock_list[speaker], do_not_again, strlen(do_not_again), 0);
                    break;
                }
                else {
                    char *new_str;
                    set_score(i);       // 클라이언트 번호 넘기면서 정답 처리하는 부분
                    game_set();
                    break;
                }
            }


            // 모든 채팅 참가자에게 메시지 방송
            buf[nbyte] = 0;
            for (j = 0; j < num_chat; j++)
                send(clisock_list[j], buf, nbyte, 0);
            printf("%s\n", buf);
        }
    }

}

// 새로운 채팅 참가자 처리
void addClient(int s, struct sockaddr_in *newcliaddr) {
    char buf[20];
    inet_ntop(AF_INET,&newcliaddr->sin_addr,buf,sizeof(buf));
    printf("new client: %s\n",buf);
     // 채팅 클라이언트 목록에 추가
    clisock_list[num_chat] = s;
    num_chat++;
}
    // 채팅 탈퇴 처리
void removeClient(int i) {
    close(clisock_list[i]);
    if(i != num_chat-1)
        clisock_list[i] = clisock_list[num_chat-1];
    num_chat--;
    printf("채팅 참가자 1명 탈퇴. 현재 참가자 수 = %d\n", num_chat);
}

// 소켓이 nonblock 인지 확인
int is_nonblock(int sockfd) {
    int val;
    // 기존의 플래그 값을 얻어온다
    val=fcntl(sockfd, F_GETFL,0);
    // 넌블록 모드인지 확인
    if(val & O_NONBLOCK)
        return 0;
    return -1;
}

// 소켓을 넌블록 모드로 설정
int set_nonblock(int sockfd) {
    int val;
    // 기존의 플래그 값을 얻어온다
    val=fcntl(sockfd, F_GETFL,0);
    if(fcntl(sockfd, F_SETFL, val | O_NONBLOCK) == -1)
        return -1;
    return 0;
}

// listen 소켓 생성 및 listen
int  tcp_listen(int host, int port, int backlog) {
    int sd;
    struct sockaddr_in servaddr;

    sd = socket(AF_INET, SOCK_STREAM, 0);
    if(sd == -1) {
        perror("socket fail");
        exit(1);
    }
    // servaddr 구조체의 내용 세팅
    bzero((char *)&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(host);
    servaddr.sin_port = htons(port);
    if (bind(sd , (struct sockaddr *)&servaddr, sizeof(servaddr))
        < 0) {
        perror("bind fail");  exit(1);
    }
    // 클라이언트로부터 연결요청을 기다림
    listen(sd, backlog);
    return sd;
}

// 현재 참가자들한테 ready 받음.(참가자 3이상)
int get_ready() {
    int i;
    for(i = 0; i< num_chat; i++) {
        if(ready_list[i] != 1)          // ready_list[i] != 1 -> i번째 클라이언트가 레디안함.
            return 0;
        if(i == num_chat-1){            // i == num_chat-1 -> 모든사람이 ready함
            start_flag = 1;
            return 1;
        }
    }

    return 0;
}

// 참가자중에 speaker 선택하기 (0번부터 시작해 num_chat 번호가 되면 다시 0번부터 시작)
// 문제도 정하기(문제번호 리턴함)
int get_speaker_and_quiz(){
    int random;

    speaker = speaker + 1;   // 제출자가 다음사람으로 넘어감.
    if(speaker == num_chat){   // 제출자가 참가자 수가 되면(참가자가 3이면 3이 되면)
        printf("<마지막 참가자까지 문제를 내었습니다. 다시 처음으로 돌아갑니다.>\n");
        speaker = 0;
    }

    srand((int)time(NULL));		// 랜덤값 항상 다르게 받으려고
    while(1){
        random = rand()%(((14-0)+1)+0);    // (((마지막값-시작값)+1)+시작값)
        if(quiz_do[random] != 1)	// 안나왔던 문제라면
	    break;
    }

    return random;
}

// 게임 셋(제출자선택, 클라이언트에게 게임시작 문구 출력, 제출자한테 문제제출)
void game_set() {
    int i;
    int quiz_n;
    char buf[MAXLINE+1];
    char start_str[200];

    quiz_n = get_speaker_and_quiz();
    quiz_num = quiz_n;                          // 현재 제시어 번호 넣어놓음.(전역변수)


    sprintf(start_str, "--------------------------------------------\n<게임을 시작합니다. 제출자는 %s 입니다.>\n", name[speaker]);
    printf("%s\n", start_str);

    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], start_str, strlen(start_str), 0);
    }

    // 제출자한테 메시지 보냄(문제)
    sprintf(buf, "<제시어는 [%s]입니다. 단어를 넣지 말고 묘사 해주세요.>\n", quiz[quiz_num]);
    send(clisock_list[speaker], buf, strlen(buf), 0);
}


// 참가자 번호 넘겨주면 점수 올림, 사람들한테 보여줌
void set_score(int num) {
    score[num] += 10;     // 해당 참가자 점수를 10점 올려줌.
    char *correct_str;
    char score_str[200];
    int i, j;

    sprintf(correct_str, "<%s 님 정답입니다! 정답 = [%s]>\n", name[num], quiz[quiz_num]);
    quiz_done += 1;					// 맞춘 퀴즈 개수 늘려줌.
    quiz_do[quiz_num] = 1;

    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], correct_str, strlen(correct_str), 0);
    }
    printf("%s\n", correct_str);

    // 전체 참가자 점수 보냄
    sprintf(score_str, "=======총스코어=======\n");
    printf("%s",score_str);
    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], score_str, strlen(score_str), 0);
    }

    for (i = 0; i < num_chat; i++) {
        for(j = 0; j< num_chat; j++) {
            sprintf(score_str, "\t%s = %d점\n", name[j], score[j]);
            send(clisock_list[i], score_str, strlen(score_str), 0);
            if(i == 0)
                printf("%s\n", score_str);
        }
    }
}

// 마지막에 점수출력 + 이긴사람 선택
void get_winner() {
    char *winner_str = "<10문제가 출제되었습니다. 게임을 종료합니다.>\n";
    char winner_str2[200];
    char score_str[200];
    int i, j, maxscore, maxperson;	// maxscore = 그사람의 점수, maxperson= 가장 높은사람

    maxscore=score[0];
    maxperson=0;

    
    printf("<10문제가 출제되었습니다. 게임을 종료합니다.>\n");

    
    //printf("num_chat = %d", num_chat);

    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], winner_str, strlen(winner_str), 0);
    }

   
    // 전체 참가자 점수 보냄
    printf("=======총스코어=======\n");
    sprintf(score_str, "=======총스코어 : %d 문제=======\n", 10);
    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], score_str, strlen(score_str), 0);
    }

    for (i = 0; i < num_chat; i++) {
	for(j = 0; j< num_chat; j++) {
	    if(maxscore < score[j]){		// 첫사람부터 시작해 검색, 0번째 사람 - 1,2,3번째 사람 비교해
		maxscore = score[j];		// 1,2,3번째 사람이 크다면 maxscore,maxperson바꿔줌.
		maxperson = j;
	    }
	    sprintf(score_str, "\t%s = %d점\n", name[j], score[j]);
            send(clisock_list[i], score_str, strlen(score_str), 0);
	    if(i == 0)
		printf("%s\n", score_str);		
        }
    }  
    printf("=============================\n");
    sprintf(score_str, "=============================\n", 10);
    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], score_str, strlen(score_str), 0);
    }

    sprintf(winner_str2, "\tWinner = %s - %d점\n=============================\n게임이 종료됩니다.\n", name[maxperson], maxscore);
    printf("%s", winner_str2);
    // 모든 채팅 참가자에게 메시지 방송
    for (i = 0; i < num_chat; i++){
        send(clisock_list[i], winner_str2, strlen(winner_str2), 0);
	send(clisock_list[i], EXIT_STRING, strlen(EXIT_STRING), 0);
    }

    printf("the end\n");
}				